--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: comments; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    author character varying(127) DEFAULT NULL::character varying,
    subject character varying(127) NOT NULL,
    content text NOT NULL,
    post_id integer,
    created timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.comments OWNER TO postgres;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO postgres;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: messages; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE messages (
    id integer NOT NULL,
    sender character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    content text NOT NULL
);


ALTER TABLE public.messages OWNER TO postgres;

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.messages_id_seq OWNER TO postgres;

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE messages_id_seq OWNED BY messages.id;


--
-- Name: posts; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE posts (
    id integer NOT NULL,
    slug character varying(127) NOT NULL,
    title character varying(127) NOT NULL,
    summary text NOT NULL,
    content text NOT NULL,
    views bigint DEFAULT 0 NOT NULL,
    updated timestamp without time zone DEFAULT now() NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.posts OWNER TO postgres;

--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE posts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.posts_id_seq OWNER TO postgres;

--
-- Name: posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE posts_id_seq OWNED BY posts.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY messages ALTER COLUMN id SET DEFAULT nextval('messages_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY posts ALTER COLUMN id SET DEFAULT nextval('posts_id_seq'::regclass);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY comments (id, author, subject, content, post_id, created) FROM stdin;
3	Bart	Bad link	Thank you. Great and helpful article. \r\nSource link download don't work.	2	2010-11-13 00:29:29+01
4	Bart	Link found	I found correct link:\r\nhttp://www.gediminasm.org/files/myapp.rar\r\n:)\r\nAnd one your blog error: when I add comment and after try add next comment then see error.	2	2010-11-13 00:40:56+01
5	Gediminas	Re: Link found	Thanks for noticing fixed both..\r\n	2	2010-11-13 20:45:33+01
6	heterhoe	error	Warning: Unexpected character in input: '\\' (ASCII=92) state=1 in F:\\workspaces\\HeWe\\application\\Bootstrap.php on line 30\r\n\r\nParse error: syntax error, unexpected T_STRING in F:\\workspaces\\HeWe\\application\\Bootstrap.php on line 30\r\n\r\nline 30 is:\r\n$classLoader = new Doctrine\\Common\\ClassLoader('Doctrine')\r\n\r\nwhat is wrong?	2	2010-12-01 15:01:54+01
7	Gediminas	Re: error	you need PHP 5.3 >\r\nerror says that it does not recognize namespace character :)	2	2010-12-01 17:58:23+01
8	Orhan saglam	Typo in  * FILE: /myapp/scripts/doctrine.php	In /myapp/scripts/doctrine.php at\r\nline 30 should be \r\n$cli = new \\Symfony\\Component\\Console\\Application(\r\n    'Doctrine Command Line Interface',\r\n    Doctrine\\Common\\Version::VERSION\r\n);\r\nNotice: Components should be Component in class name.	2	2010-12-08 20:02:09+01
9	Gediminas	Re: Typo in  * FILE: /myapp/scripts/doctrine.php	Hi, thanks for noticing, I will update that soon.	2	2010-12-09 18:22:49+01
10	sam	error	php doctrine orm:convert-mapping --from-database yml /path/to/mapping-path-converted-to-yml\r\n\r\nI get a file "User.dcm.yml" and the first line is "User:"\r\n\r\nI know, this is incorrect, it should be "Entity.User.dcm.yml" and "Entity\\User" (http://www.doctrine-project.org/docs/orm/2.0/en/\r\nreference/yaml-mapping.html). \r\n\r\nwhat is wrong? 	2	2011-03-15 05:59:50+01
11	Gediminas	Re: error	Yes probably it is a mistake of mine, I will fix that later, thanks for noticing. Try annotation mapping instead if you cant get it to work by now.	2	2011-03-15 18:41:50+01
12	sam	Re: Re: error	I am more worried\r\n\r\nModify the way you can tell me\r\n\r\n\r\n<blockquote><p>\r\n        Yes probably it is a mistake of mine, I will fix that later, thanks for noticing. Try annotation mapping instead if you cant get it to work by now.    </p></blockquote>\r\n	2	2011-03-21 06:19:19+01
13	Gediminas	Re: Re: Re: error	Thats not a bug, I checked it and in general, when you export your models from the database, it cannot know any namespace of your entities. For that feature to be available everyone would need to follow the naming conventions of tables, in order to recognize namespaces, which I think no one will want.	2	2011-03-22 17:26:27+01
14	Miles	Fatal error	I've double checked everything but when i get to \r\ndoctrine migrations:diff\r\ni get the following error:\r\n\r\nRunning Doctrine CLI.\r\nPHP Fatal error:  Call to undefined method Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\DiffCommand::getApplication() in [...]\\myapp\\library\\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\AbstractCommand.php on line 82\r\n\r\nFatal error: Call to undefined method Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\DiffCommand::getApplication() in [...]\\myapp\\library\\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\AbstractCommand.php on line 82\r\n\r\n\r\nStrange fact is that \r\nDoctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\DiffCommand.php doesn't contain any function called getApplication().\r\n\r\nAny ideas?	2	2011-05-11 19:50:34+02
15	Gediminas	Re: Fatal error	hi, my tutorial might be outdated. I recommend you to check if the libraries you are using are compatible. Use github to check recent commits, and check how getApplication was changed. Recently in doctrine were some incompatibilities on master branches	2	2011-05-11 20:14:45+02
16	Ricardo Oedietram	Great article	Thank you very much!\r\n\r\nI have now also doctrine 2.0 running with Zend 1.11 with smarty 3 (previous article)!\r\n\r\nGreat explanation and finally I know the basics of Doctrine.\r\n\r\nKeep up the good work!	2	2011-05-30 15:47:36+02
17	muhammad	thankyou	cheers 0=)	2	2011-12-11 14:06:03+01
18	Marijus	Compiling 5.2 on Ubuntu 10.10 (Maverick)	I've just compiled php-5.2.13 on Ubuntu 10.10 and here's what I had to modify from the above instructions:\r\n\r\n1) "pre-requisites" - It seems, that apache2-mpm-prefork and apache2-threaded-dev are alternatives as the latter has removed the first one. This doesn't hurt so it's OK this way, but I think the first one could possible be skipped without any loss.\r\n\r\n2) I had problems with IMAP, and on the web I found that I have either to disable it or to recompile IMAP manually, so I decided to go with the first option as I personally don't see much of the value added in it. (i.e. I removed lines --with-imap and --with-imap-ss from build_php )\r\n\r\n3) mhash was also causing problems as ./configure was unable to locate mhash.h. Here there were the same two options: drop it or compile it. Here I went with the second one, Grabbed a copy from http://sourceforge.net/projects/mhash/ , and did the usual drill - ./configure && make && make install - this fixed the problem.\r\n\r\n`make test` still got me 27 failed tests, but I suppose I can live with that.\r\n\r\nGood luck to all of you following this :)	3	2010-10-25 12:33:00+02
19	Gediminas	Re: Compiling 5.2 on Ubuntu 10.10 (Maverick)	This was meant on compilation for PHP 5.3 as article header says. Anyway I`m glad that you worked it out\r\n\r\n1) that`s not a big issue, since it does not install unneeded packages\r\n2) --with-kerberos=/usr \\ is not necessary in this case also\r\n3) older PHP versions have problems mentioned with mhash, again compilation is for PHP 5.3.x	3	2010-11-09 00:03:35+01
20	sheryl villaroman	upgrading 5.3.2 to 5.3.4	I followed this tutorial when I upgraded Php from v 5.3.2 to Php v5.3.4, and it worked for me. \r\n\r\nThough I encountered IMAP related error, what I did was to install the following;\r\n\r\napt-get install courier-imap\r\napt-get install courier-authlib-baseapt-get\r\n\r\nI also encountered postfix related problem, then I installed\r\n\r\napt-get install postfix\r\napt-get install mailutils \r\n\r\nI also encountered error; configure: error: utf8_mime2text() has new signature, but U8T_CANONICAL is missing\r\n\r\nI run the command below;\r\n\r\napt-get install libc-client-dev\r\n\r\nand run the php_build again, there's no more error displayed.\r\n\r\nI have now Php 5.3.4, but I am looking for the php.ini file because I'm going to disable the display_errors, but I can't find it, where is the new php.ini located?\r\n\r\n	3	2010-12-22 13:48:31+01
21	Gediminas	Re: upgrading 5.3.2 to 5.3.4	You can specify the ini file path on build like:\r\n<strong>--with-config-file-path=PATH</strong>\r\nOr in your module.conf\r\n<strong>PHPIniDir /root/src/php-5.3.x/libs</strong>\r\nlike it is shown in the example	3	2010-12-22 17:20:21+01
22	sheryl villaroman	php.ini	hi! thanks for your reply.\r\n\r\nI am still having a hard time on php.ini, \r\nIn my case I upgraded from php 5.3.2 to 5.3.4, I copied php.ini-production from the root folder php-5.3.4 to PHPIniDir /root/src/php-5.3.5/libs (the path of the new php ini directory on my server) and rename it as php.ini.\r\n\r\nI tried to change the value of some of the directives, I disabled display_errors =Off, increased upload_max_filesize = 50M but it's not taking an effect when I check it to phpinfo.	3	2010-12-23 20:08:00+01
23	Gediminas	Re: php.ini	hi, you can try to remove if closure in php_mod.conf:\r\n<strong>&lt;ifmodule mod_php5.c=""&gt;</strong>\r\nor you can try to add a syntax error in this closure to see if it gets read. Or rebuild the php with --with-config-file-path=/phpinidir	3	2010-12-24 12:25:23+01
24	Marijus	Re: php.ini	Since you can see php info, locating php.ini should not be difficult: phpinfo has these two values printed out "Loaded Configuration File" and "Scan this dir for additional .ini files" - try checking those.	3	2011-01-12 15:27:54+01
25		Re: Re: php.ini	Hi,\r\n\r\nSorry for taking too long to reply, this tutorial really works, I just made a simple mistake on php code that's why there's an error during testing.\r\n\r\nThank you so much, this tutorial really helped and saved my new year :)\r\n\r\nRegards,\r\n\r\nSheryl Villaroman\r\n\r\n<blockquote><p>\r\n        hi, you can try to remove if closure in php_mod.conf:<br>\r\n<strong><ifmodule mod_php5.c=""></strong><br>\r\nor you can try to add a syntax error in this closure to see if it gets read. Or rebuild the php with --with-config-file-path=/phpinidir    </p></blockquote>	3	2011-06-09 20:36:14+02
26		Re: Re: Re: php.ini	Thanks, it worked a treat !! :)	3	2011-12-31 15:59:51+01
27	Rimas	a	in class Ext_View_Smarty \r\nline 67 68 you have replace code:\r\n$cache_id = md5($_SERVER['REQUEST_URI']); \r\n$this->_smarty->display($template, $cache_id);\r\n\r\nthis replacement fix cache problems in different module	4	2010-11-24 13:28:16+01
28	Gediminas	Re:Rimas	Thanks for noticing, in near future I will find time to fix it	4	2010-11-25 10:42:00+01
29	John	headLink	Hi, this is brilliant thank you, although I am having a problem with headLink()->appendStylesheet. Should this still work?	4	2010-12-28 08:09:23+01
30	Gediminas	Re: headLink	Yes, sure it works, lets say on index.tpl you add:\r\n{$this->headLink()->appendStylesheet('/css/common.css')}\r\nAnd on layout.tpl:\r\n{$this->headLink()}\r\n\r\nIt would be more clear if you change $this into $view. Modify the library smarty view class to achieve this.\r\nThe result will be as expected, have fun\r\n<blockquote><p>\r\n        Hi, this is brilliant thank you, although I am having a problem with headLink()->appendStylesheet. Should this still work?    </p></blockquote>	4	2011-01-03 19:58:05+01
31	Kortex786	Exception while testing	Hy,\r\n\r\nI tried exactly what you described, and I get this Exception on Index :\r\nUncaught exception 'Zend_View_Exception' with message 'script 'error/error.phtml' not found in path\r\n\r\nIt seems like $viewRenderer->setView($view); did nothing  and the default Zend_view is used !\r\n\r\nCan you help me please ?\r\n	4	2011-01-27 17:57:04+01
32	Gediminas	Re: Exception while testing	Hi\r\nTry using the source code which you can download from notice list, at the top of the article.	4	2011-01-29 23:50:48+01
33	openbsdiste	output method & *basepath	I think that your output method shouldn't send headers informations as it has to be done by the layer and not to be hardcoded.\r\n\r\nIn setBasePath and addBasePath, I think that script base path and template base dir shouldn't be hardcoded.\r\n\r\nAnyway, those two things are details and you've done a great job.\r\nThank you.\r\n	4	2011-02-11 12:51:49+01
34	jp	error	Fatal error: Call to a member function getDefaultModule() on a non-object in myapp\\library\\Zend\\Application\\Bootstrap\\Bootstrap.php on line 89?\r\n	4	2011-02-19 14:53:24+01
35	Pavel	Change layout	Thank you, great solution!\r\nHow i can change layout for some controllers?	4	2011-02-24 20:09:00+01
36	Myles	Nice Posting	First I would like to thank you for this nice blog it helped me a lot.\r\n\r\nIt works\r\n\r\nBy the way there a missing code in your smarty.php\r\n<?  and please remove </type>\r\n	4	2011-03-01 18:11:54+01
37	Tom Anderson	Module Names in template paths 	I've tried your approach and can't find how to include module names in template paths such as default/index/index.tpl  \r\nWithout this it seems I'm stuck with a flat directory structure.\r\n\r\nAlso, I can't figure out how to change the default template paths to something like /skins/default/module/controller/action.tpl	4	2011-03-07 23:24:52+01
38	JvM	Smarty translate and Zend_Translate	Hi\r\n\r\nThanks for this great explanation. I know it's allready an older topic but hopefully you are able to help. I included the translate block for Smarty: http://www.smarty.net/docs/en/plugins.block.functions.tpl\r\n\r\nDo you know if it is possible to use the Zend_Translate system with this? Instead of using a gettext or whatever there is ;)\r\n\r\nThanks in advance	4	2011-03-11 00:23:17+01
39	Gediminas	Re: Smarty translate and Zend_Translate	Hi, I currently do not work with zend anymore, but I have used translations with smarty3 and it worked as it should normally. I mean Zend_Translate. <a href="http://dev.mjk.lt/I18nCommand">here</a> is a tool I used for translation file generation from templates and other files.	4	2011-03-26 15:58:19+01
40		Re: Module Names in template paths 	<blockquote><p>\r\n        I've tried your approach and can't find how to include module names in template paths such as default/index/index.tpl  <br>\r\nWithout this it seems I'm stuck with a flat directory structure.<br>\r\n<br>\r\nAlso, I can't figure out how to change the default template paths to something like /skins/default/module/controller/action.tpl    </p></blockquote>	4	2011-08-30 14:42:56+02
41	Gediminas	Re: Re: Module Names in template paths 	hi, its all in the Ext_View_Smarty class, line 290 you can add customized paths. but module paths should work out of the box if you followed the tutorial right	4	2011-09-10 14:42:54+02
42	Mario	I can't make it work : ViewRenderer initialization failed	I am trying your class but I keep getting errrors\r\n\r\nPHP Fatal error:  Uncaught exception 'Zend_Controller_Action_Exception' with message 'ViewRenderer initialization failed: retrieved view base path is empty' in /usr/local/zend/share/ZendFramework/library/Zend/Controller/Action/Helper/ViewRenderer.php:475	4	2011-09-30 04:46:12+02
43	Paul M	Default templates on new modules	Hey there, great post thanks.\r\n\r\nIs there any way we can work this so that if templates aren't specified in a new modules structure that the default templates are used instead?\r\n\r\nThanks\r\n\r\nPaul	4	2011-10-06 20:07:12+02
44	Gediminas	Re: Default templates on new modules	hi, you can simply add static template paths. like in line 294 Ext_View_Smarty	4	2011-10-07 10:30:13+02
45	gecata83	Re: error	<blockquote><p>\r\n        Fatal error: Call to a member function getDefaultModule() on a non-object in myapp\\library\\Zend\\Application\\Bootstrap\\Bootstrap.php on line 89?<br>\r\n    </p></blockquote>\r\n$this->getApplication()->setOptions($this->getOptions())->bootstrap('frontController');	4	2011-11-22 10:16:45+01
46	Lev	Application path issues	Hi\r\n    I tried this  and it works fine for me.Thank you.But i am facing one issue when i upload it in to a linux hosting server.It is working fine in localhost but throwing an error on server\r\n"Fatal error: Class 'Ext_View_Smarty' not found in  Bootstrap.php"\r\nit seems like some issues in application path. can anybody help me to solve this. In the server, my directory structure is like this "\r\nmyserver.com/staging/clientname/myproject"	4	2011-11-23 07:28:18+01
47	Gediminas	Re: Application path issues	Hi in that case there might be two reasons, or both:\r\n1) include path is not added, pointing to your application. but less possible zend app should do it in index.php.\r\n2) you should register autoload prefix <strong>Ext</strong> like:\r\n; --- ini config file ---\r\nautoloaderNamespaces.extension[] = "Ext_"\r\n\r\nif you use zf2 you should register this prefix anyway for this file to be autoloaded. or for quick hack simply include it in your index.php :) or you can rename it of course	4	2011-11-24 10:40:57+01
48		Re: Re: Application path issues	Hi Gediminas,\r\n          Thank you for helping.I checked everything and could not find any issues in the index.php and application.ini. I am giving my  index.php and application.ini contents here.Please look at the settings and help me if i have to do anything on this.( my zend libraries are located on "projectfolder/library/Zend")\r\n\r\napplication.ini\r\n----------------\r\nphpSettings.display_startup_errors = 1\r\nphpSettings.display_errors = 1\r\nincludePaths.library = APPLICATION_PATH "/../library"\r\nbootstrap.path = APPLICATION_PATH "/Bootstrap.php"\r\nbootstrap.class = "Bootstrap"\r\nappnamespace = "Application"\r\nresources.frontController.controllerDirectory = APPLICATION_PATH "/controllers"\r\nresources.frontController.params.displayExceptions = 1\r\nbootstrap.css = APPLICATION_PATH "/public/css"\r\nresources.layout.layout = "layout"\r\nresources.layout.nolayout = "nolayout"\r\n\r\nresources.view[] =\r\n\r\n; --- Autoloading Prefixes ---\r\nautoloaderNamespaces.extension[] = "Ext_"\r\n; --- Smarty ---\r\n\r\nsmarty.caching = 0\r\nsmarty.cache_lifetime = 0 ;set in minuts\r\nsmarty.template_dir = APPLICATION_PATH "/scripts/"\r\nsmarty.compile_dir = APPLICATION_PATH "/tmp/smarty_compile/"\r\nsmarty.config_dir = ""\r\nsmarty.cache_dir = APPLICATION_PATH "/tmp/smarty_cache/"\r\nsmarty.left_delimiter = "{"\r\nsmarty.right_delimiter = "}"\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n\r\npublic/index.php\r\n-------------------------\r\n/ Define path to application directory\r\ndefined('APPLICATION_PATH')\r\n    || define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application'));\r\n\r\n// Define application environment\r\ndefined('APPLICATION_ENV')\r\n    || define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'production'));\r\n\r\n// Ensure library/ is on include_path\r\nset_include_path(implode(PATH_SEPARATOR, array(\r\n    realpath(APPLICATION_PATH . '/../library'),\r\n    get_include_path(),\r\n)));\r\n\r\n/** Zend_Application */\r\nrequire_once 'Zend/Application.php';\r\n\r\n// Create application, bootstrap, and run\r\n$application = new Zend_Application(\r\n    APPLICATION_ENV,\r\n    APPLICATION_PATH . '/configs/application.ini'\r\n);\r\n\r\n$application->bootstrap()\r\n            ->run();\r\n\r\n\r\nServer Directory structure to host the application\r\n----------------------------------------\r\nwww.myserver.com/staging/clientname/myproject/\r\n	4	2011-11-24 15:30:38+01
49		Re: Re: Re: Application path issues	Hi Gediminas\r\n\r\nI found the bug. My smarty library structure was "Ext/view/Smarty.php" instead of "Ext/View/Smarty.php. I renamed "view" folder to "View" (capital V) then it works fine.Thank you for your help	4	2011-11-24 16:17:51+01
50	Gediminas	Re: Re: Re: Re: Application path issues	Yes, its one thing you should be familliar with in linux first of all. glad you sorted it out	4	2011-11-24 23:32:26+01
51	JustBeBetter	Thanks	Thanks for your article ï¼	4	2012-01-05 11:56:47+01
52	iCan	No layout	Hello, i have a problem. There is no header. And the example do not works if the layout lines in the bootstrap are not commented. Im using zf 1.11.	4	2012-01-19 22:58:40+01
53	Gediminas	Re: No layout	Hi, well this article is **2** years old, it would be weird if it would work as well as it did. Maybe it requires few adaptive modifications	4	2012-01-20 00:59:52+01
54	Andre	Re: Re: No layout	What a great tutorial to show some of the features of Zend Framework. I've got it working mostly with ZF 1.11, but I'm having an issue with the layout.tpl being the only content rendered even if my index.tpl has to reference to it. Do you know what might be causing this?  Thanks!	4	2012-01-23 21:01:30+01
55	Gediminas	Re: Re: Re: No layout	hi, you should debug the [bootstrap part](http://www.gediminasm.org/article/smarty-3-extension-for-zend-framework#boot) and especially make sure layout mvc is there. I haven't worked with Zend for over a year now. theres also [example source code](http://gediminasm.org/files/smarty.rar) which was working out of the box, using older libraries.	4	2012-01-24 11:22:03+01
56	4u4v	4u4v	partialLoop() Only loop to loop through an array of the first record\r\nThe output results are as follows:\r\n\r\nrecord0\r\nrecord0\r\nrecord0\r\n\r\nWhy???	4	2012-02-09 12:05:36+01
57	Gediminas	Re: 4u4v	Hi, this article is old and not maintained, there might be inconsistencies	4	2012-02-11 23:17:58+01
58	Morgan	Question	smarty.caching = 0\nWhy do not allow caching?	4	2012-02-18 15:36:22+01
59	magalie	many thanks	love smarty, like zend -> great job !!	4	2012-02-21 00:49:33+01
60	Hpxtech	Awesome	Thanks to you, I have been able to configure Zend and Smarty to make what I wanted!\nI'm new to Zend and I needed to made few modifications, but it was globally very clear.	4	2012-04-14 18:27:38+02
61	Tamas Kalman	Amazing tutorial	I've compared many Zend/Smarty 3 tutorials, and this one is the most comprehensive one. Beautifully integrated configuration directives, even the controller routers are implemented. Thank you for sharing!	4	2012-05-02 09:57:29+02
62	Tamas Kalman	Re: Question	In development, caching is not allowed, only in production. See the different sections of the configuration file.	4	2012-05-02 09:58:19+02
63	Gediminas	Re: Re: Question	Hi, as you see this article was written 2 years ago using alfa smarty 3 version. I do not work currently nor with Zend or smarty. Glad it still helps people around. You [could contribute](https://github.com/l3pp4rd/gediminasm.org/blob/master/src/Gedmo/BlogBundle/Resources/articles/smarty.md) to this tutorial	4	2012-05-02 12:35:54+02
64	Eric	have fatel error	Hi, I work with your example, but have a error:\nFatal error: Uncaught exception 'Zend_Controller_Dispatcher_Exception' with message 'Invalid controller specified (error)'	4	2012-07-02 11:07:33+02
65	YahooTiger	There is a problem in Redhat linux by the project!	First, thanks.It works very well in Windows.But  \nwhen I move the project to linux, it doesn't work.show nothing.	4	2012-07-31 07:41:56+02
66	Robert	Zend Framework integration	Great! thanks :)	4	2012-10-04 00:50:44+02
67	Gediminas	Re: There is a problem in Redhat linux by the project!	I do not support it anymore, it is just a startup you can use to have something working	4	2012-11-01 21:54:57+01
68	loz.andriy@gmail.com	nice post!!!	nice post!!!	1	2012-06-20 00:41:25+02
69	Gediminas	Re: nice post!!!	Thanks, later will post on jQuery javascript application practices	1	2012-06-20 03:23:26+02
70		Great pratical explanation	Thank you for your post!\nBelieve it or not, this is one of the few posts explaining JS prototyping with OOP style, which leads to way better project management.	1	2012-08-20 21:43:57+02
71		Just thank you	Thank you !	1	2012-09-04 22:42:22+02
72	Pada	Simple and elegant	very nice endeed.	1	2012-11-01 05:09:26+01
73	ToJa	Some advices	1. Always declare methods in prototypes - it saves memory. Method does not need to be instantiated everytime when object is created - it is always the same method.\n2. Don't be scared to put private properties as public in objects (it allows you to access them from methods in prototype) - just mark them with '_' prefix. If any idiot calls method or accesses property marked as private it's his responsibility, it's clearly not meant to be accessed so if anything would break it will be his, not your, fault.	1	2013-01-14 18:11:50+01
74	Gediminas	Re: Some advices	Hi ToJa,\nYou have a good point here, private variables require methods in constructor initialization. This should be used judiciously because sometimes it serves good if you restrict those variable visibility even from your self, not only other developers. It helps you to find better solutions from time to time, but of course not always. Will add these tips in the list ;)	1	2013-01-15 00:29:56+01
75	ToJa	Re: Re: Some advices	Also it is quite important that arguments.callee is deprecated and based on the ECMAScript 5 standard it throws exception in strict mode so it is better to provide a name for anonymous functions and not to use arguments.callee.	1	2013-01-16 13:09:38+01
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('comments_id_seq', 75, true);


--
-- Data for Name: messages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY messages (id, sender, email, content) FROM stdin;
1	test	gedi@jirafe.com	tggg
\.


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('messages_id_seq', 1, true);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY posts (id, slug, title, summary, content, views, updated, created) FROM stdin;
2	doctrine-2-on-zend-framework	Doctrine 2 on Zend framework	<p>This article describes how to connect Doctrine2 with Zend Framework.</p>\n\n<p>Main implementation stuff:</p>\n\n<ul>\n<li>Bootstrap Doctrine allowing multi-driver support for meta data</li>\n<li>Configure namespaces and loaders for CLI support</li>\n<li>Extensive and simple implementation for any usage</li>\n</ul>\n	<p>Update <strong>2010-12-18</strong></p>\n\n<ul>\n<li>Renamed vendor Symfony Components to Component</li>\n<li>Removed some duplicate code and fixed naming</li>\n</ul>\n\n<p>First of all required libraries and file structure:</p>\n\n<ul>\n<li>Install and configure the standard Zend application, CLI: <strong>zf create project myapp</strong>. If its a mist for you, read tutorial</li>\n<li>Download and place Doctrine - <a href="http://www.doctrine-project.org/projects/orm/download" target="new">ORM</a>, it should contain also DBAL, Common and required Symfony component packages, place them in <strong>/myapp/library/Doctrine</strong> directory</li>\n<li>Download or checkout <a href="http://github.com/doctrine/migrations" target="new">migrations</a> package, place it in /Doctrine/DBAL/</li>\n<li>If you would like to use other driver than Annotation, you can create Mapping folder under configs directory</li>\n<li><strong>Migration</strong> directory should also by created in /application/configs/</li>\n<li>Create Entity and Proxy folders in application directory</li>\n</ul>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n<li>This implementation is based on <strong>Doctrine2 RC2</strong> version</li>\n<li>Last update date: <strong>2010-12-18</strong></li>\n</ul>\n\n<p>The file structure should look like this now:</p>\n\n<pre><code>...\n/myapp\n    /application\n        /configs\n            /Mapping\n            /Migration\n            application.ini\n        /Entity\n        /modules\n        /Proxy\n        Bootstrap.php\n    /library\n        /Doctrine\n            /Common\n            /DBAL\n                /Migrations\n                ...\n            /ORM\n            /Symfony\n        /Zend /*if not in include path*/\n    /public\n...\n</code></pre>\n\n<p>Next, will use yaml mapping for our entities in this example, create a <strong>User</strong> entity in Yaml mapping format.</p>\n\n<pre><code>---\n# FILE /myapp/application/configs/Mapping/Entity.User.dcm.yml\nEntity\\User:\n  type: entity\n  table: users\n  id:\n    id:\n      type: integer\n      generator:\n        strategy: AUTO\n  fields:\n    password:\n      type: string\n      length: 32\n    username:\n      type: string\n      length: 128\n  oneToOne:\n    role:\n      targetEntity: Entity\\Role\n      inversedBy: users\n      joinColumn:\n        name: role_id\n        referencedColumnName: id\n  indexes:\n    search_idx:\n      columns: username\n</code></pre>\n\n<p>The other one is <strong>Role</strong> Entity. Location <strong>/myapp/application/configs/Mapping/</strong></p>\n\n<pre><code>---\n# FILE /myapp/application/configs/Mapping/Entity.Role.dcm.yml\nEntity\\Role:\n  type: entity\n  table: roles\n  id:\n    id:\n      type: integer\n      generator:\n        strategy: AUTO\n  fields:\n    name:\n      type: string\n      length: 50\n      unique: true\n  oneToMany:\n    users:\n      targetEntity: Entity\\User\n      mappedBy: role\n</code></pre>\n\n<p>Before we start using cli to create our tables and Entities, we need to modify the <strong>/myapp/configs/application.ini</strong></p>\n\n<pre><code>[production]\n; here goes some standard configuration\nphpSettings.display_startup_errors = 0\nphpSettings.display_errors = 0\n\nbootstrap.path = APPLICATION_PATH "/Bootstrap.php"\nbootstrap.class = "Bootstrap"\n\n; we will use the module for the good practise\nresources.frontController.moduleDirectory = APPLICATION_PATH "/modules"\nresources.frontController.moduleDefault = "default"\n\n; layout if needed\nresources.layout.layout = "layout"\nresources.view[] =\n; -------------------------------------\n; Here fallows Doctrine 2 Configuration\n; -------------------------------------\n\n; Database configuration\ndbal.driver = "pdo_mysql"\ndbal.host = "127.0.0.1"\ndbal.user = "root"\ndbal.password = "secret"\ndbal.dbname = "doctrine2"\n\n; location for Entity proxies and namespace\norm.proxy.path = APPLICATION_PATH "/Proxy"\norm.proxy.namespace = "Proxy"\n\n; ----------------------------------------------------\n; Multi driver configuration for our database metadata\n; ----------------------------------------------------\n\n; first is the yaml driver to read the mapping from User.yml\norm.driver.mainYamlDriver.type = "Yaml"\norm.driver.mainYamlDriver.path[] = APPLICATION_PATH "/configs/Mapping"\norm.driver.mainYamlDriver.namespace = "Entity"\n\n; second is the annotation driver for example for mapping extension Entities\n; notice: that the namespace should differ and the location specified to look\n; for Entity metadata should exist\n;orm.driver.extensionDriver.type = "Annotation"\n;orm.driver.extensionDriver.path[] = APPLICATION_PATH "/../library/DoctrineExtensions/Versionable/Entity"\n;orm.driver.extensionDriver.namespace = "DoctrineExtensions"\n\n; later use APC for instance\norm.cache.metadata = "Array"\norm.cache.query = "Array"\n\n[staging : production]\n\n[cli : production]\nphpSettings.display_startup_errors = 1\nphpSettings.display_errors = 1\n\n[testing : production]\nphpSettings.display_startup_errors = 1\nphpSettings.display_errors = 1\n\n[development : production]\nphpSettings.display_startup_errors = 1\nphpSettings.display_errors = 1\nresources.frontController.params.displayExceptions = 1\n</code></pre>\n\n<p>Modify the <strong>/myapp/application/Boostrap.php</strong> and add doctrine boot</p>\n\n<pre><code>class Bootstrap extends Zend_Application_Bootstrap_Bootstrap\n{\n    protected function _initDoctrine()\n    {\n        // load the doctrine class loader for Doctrine library\n        require 'Doctrine/Common/ClassLoader.php';\n        $classLoader = new Doctrine\\Common\\ClassLoader('Doctrine');\n        $classLoader-&gt;register();\n        // load the doctrine class loader for Symfony library components\n        $classLoader = new \\Doctrine\\Common\\ClassLoader('Symfony', 'Doctrine');\n        $classLoader-&gt;register();\n        // load the doctrine class loader for Entity autoloading\n        $classLoader = new \\Doctrine\\Common\\ClassLoader(\n            'Entity',\n            APPLICATION_PATH\n        );\n        $classLoader-&gt;register();\n        // read ini configuration\n        $settings = $this-&gt;getOption('orm');\n\n        // load proxy configuration settings\n        $config = new Doctrine\\ORM\\Configuration;\n        $config-&gt;setProxyDir($settings['proxy']['path']);\n        $config-&gt;setProxyNamespace($settings['proxy']['namespace']);\n        $config-&gt;setAutoGenerateProxyClasses((APPLICATION_ENV == "development"));\n        // load metadata drivers\n        $drivers = $settings['driver'];\n        $chainDriverImpl = new Doctrine\\ORM\\Mapping\\Driver\\DriverChain();\n        foreach ($drivers as $driver) {\n            if ($driver['type'] == 'Annotation') {\n                $driverImpl = $config-&gt;newDefaultAnnotationDriver($driver['path']);\n            } else {\n                $driverClassName = 'Doctrine\\ORM\\Mapping\\Driver\\\\' . $driver['type'] . 'Driver';\n                $driverImpl = new $driverClassName($driver['path']);\n            }\n            $chainDriverImpl-&gt;addDriver($driverImpl, $driver['namespace']);\n        }\n        $config-&gt;setMetadataDriverImpl($chainDriverImpl);\n        // Set up caches\n        $cacheMetadataClassName = 'Doctrine\\Common\\Cache\\\\' . $settings['cache']['metadata'] . 'Cache';\n        $cache = new $cacheMetadataClassName();\n        $config-&gt;setMetadataCacheImpl($cache);\n        if ($settings['cache']['metadata'] != $settings['cache']['query']) {\n            $cacheQueryClassName = 'Doctrine\\Common\\Cache\\\\' . $settings['cache']['query'] . 'Cache';\n            $cache = new $cacheQueryClassName();\n        }\n        $config-&gt;setQueryCacheImpl($cache);\n\n        // event manager if needed\n        $evm = new Doctrine\\Common\\EventManager();\n        // boot entity manager\n        $em = Doctrine\\ORM\\EntityManager::create(\n            $this-&gt;getOption('dbal'),\n            $config,\n            $evm\n        );\n        // store entity manager in registry\n        Zend_Registry::set('em', $em);\n        return $em;\n    }\n}\n</code></pre>\n\n<p>The metadata and database is the best to create through Doctrine CLI. Create the <strong>/myapp/scripts/</strong> directory and add the <strong>doctrine.php</strong> file in it, which will boostrap the CLI</p>\n\n<pre><code>&lt;?php\n/**\n * FILE: /myapp/scripts/doctrine.php\n * Doctrine 2 CLI script\n */\n\ndefine('APPLICATION_ENV', 'cli');\ndefine('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application'));\n\nset_include_path(implode(PATH_SEPARATOR, array(\n    realpath(APPLICATION_PATH . '/../library'),\n    get_include_path(),\n)));\n\nrequire_once 'Zend/Application.php';\n\n// Create application, bootstrap, and run\n$application = new Zend_Application(\n    APPLICATION_ENV,\n    APPLICATION_PATH . '/configs/application.ini'\n);\n\n$application-&gt;getBootstrap()-&gt;bootstrap('doctrine');\n$em = Zend_Registry::get('em');\n\n// comment if migrations are not used\n$classLoader = new Doctrine\\Common\\ClassLoader('Doctrine\\DBAL\\Migrations', 'Doctrine/DBAL');\n$classLoader-&gt;register();\n\n$helpers = array(\n    'db' =&gt; new \\Doctrine\\DBAL\\Tools\\Console\\Helper\\ConnectionHelper($em-&gt;getConnection()),\n    'em' =&gt; new \\Doctrine\\ORM\\Tools\\Console\\Helper\\EntityManagerHelper($em),\n    'dialog' =&gt; new \\Symfony\\Component\\Console\\Helper\\DialogHelper(),\n);\n\n$cli = new \\Symfony\\Component\\Console\\Application(\n    'Doctrine Command Line Interface',\n    Doctrine\\ORM\\Version::VERSION\n);\n$cli-&gt;setCatchExceptions(true);\n$helperSet = $cli-&gt;getHelperSet();\nforeach ($helpers as $name =&gt; $helper) {\n    $helperSet-&gt;set($helper, $name);\n}\n\n$cli-&gt;addCommands(array(\n    // DBAL Commands\n    new \\Doctrine\\DBAL\\Tools\\Console\\Command\\RunSqlCommand(),\n    new \\Doctrine\\DBAL\\Tools\\Console\\Command\\ImportCommand(),\n\n    // ORM Commands\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\ClearCache\\MetadataCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\ClearCache\\ResultCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\ClearCache\\QueryCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\SchemaTool\\CreateCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\SchemaTool\\UpdateCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\SchemaTool\\DropCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\EnsureProductionSettingsCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\ConvertDoctrine1SchemaCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\GenerateRepositoriesCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\GenerateEntitiesCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\GenerateProxiesCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\ConvertMappingCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\RunDqlCommand(),\n    new \\Doctrine\\ORM\\Tools\\Console\\Command\\ValidateSchemaCommand(),\n\n    // Migrations Commands, remove if not needed\n    new \\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\DiffCommand(),\n    new \\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\ExecuteCommand(),\n    new \\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\GenerateCommand(),\n    new \\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\MigrateCommand(),\n    new \\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\StatusCommand(),\n    new \\Doctrine\\DBAL\\Migrations\\Tools\\Console\\Command\\VersionCommand(),\n));\n$cli-&gt;run();\n</code></pre>\n\n<p>If you use migrations create ../myapp/scripts/migrations.yml for migration configuration:</p>\n\n<pre><code>---\nname: Doctrine Migrations\nmigrations_namespace: DoctrineMigration\ntable_name: ext_migration_versions\nmigrations_directory: ../application/configs/Migration\n</code></pre>\n\n<p>Create the shell or batch script(windows) to run it through PHP cli</p>\n\n<p><strong>/myapp/scripts/doctrine.bat</strong> dont forget to modify the <strong>php.exe</strong> path and the <strong>script</strong> location if it difers</p>\n\n<pre><code>@echo off\necho Running Doctrine CLI.\n"C:\\php\\php.exe" -f doctrine.php %1 %2 %3 %4 %5 %6 %7 %8 %9\n</code></pre>\n\n<p>For linux users</p>\n\n<p><strong>/myapp/scripts/doctrine.sh</strong> dont forget to modify the <strong>php bin</strong> path if it difers, and run <strong>chmod +x</strong></p>\n\n<pre><code>#!/usr/bin/env php\nchdir(dirname(__FILE__));\ninclude('doctrine.php');\n</code></pre>\n\n<p>Now lets go to the Shell or Command Prompt, go to <strong>/myapp/scripts/</strong> and run these commands:</p>\n\n<p><strong>Notice:</strong> that the last argument(1, 2 commands) is the location of your application</p>\n\n<p><strong>Notice:</strong> before running the third command, database must be created, empty and entities must be created also[first command]</p>\n\n<ul>\n<li>doctrine orm:generate-entities ../application</li>\n<li>doctrine orm:generate-proxies ../application/Proxy</li>\n<li>if you do not use migrations, run create schema: <strong>doctrine orm:schema-tool:create</strong></li>\n<li>doctrine migrations:diff</li>\n<li>doctrine migrations:migrate</li>\n</ul>\n\n<p>After running first command the Entities should be created in the <strong>/application/Entity</strong> directory, unless you specified another. After running the second would create proxies for the lazy loading. Then if you used migrations, 3 command would create migration from the entities found and 4 command would migrate to these changes.</p>\n\n<p>By this point, we should have everything in place. Lets play around a bit. First, if you have not created index controller, create it and modify a bit to test our new stuff, file: <strong>/myapp/application/modules/default/controllers/IndexController.php</strong></p>\n\n<pre><code>class IndexController extends Zend_Controller_Action\n{\n    protected $_em;\n\n    public function init()\n    {\n        $this-&gt;_em = Zend_Registry::get('em');\n    }\n\n    public function indexAction()\n    {\n        $user = $this-&gt;_em-&gt;getRepository('Entity\\User')-&gt;find(1);\n        if (!$user) {\n            // create groups and user only once\n            $this-&gt;populate();\n            $user = $this-&gt;_em-&gt;getRepository('Entity\\User')-&gt;find(1);\n        }\n        $this-&gt;view-&gt;user = $user;\n    }\n\n    public function populate()\n    {\n        // create Roles\n        $guestRole = new Entity\\Role;\n        $guestRole-&gt;setName('guest');\n        $this-&gt;_em-&gt;persist($guestRole);\n\n        $adminRole = new Entity\\Role;\n        $adminRole-&gt;setName('admin');\n        $this-&gt;_em-&gt;persist($adminRole);\n\n        $memberRole = new Entity\\Role;\n        $memberRole-&gt;setName('member');\n        $this-&gt;_em-&gt;persist($memberRole);\n\n        // create users\n        $user = new Entity\\User;\n        $user-&gt;setUsername('Master');\n        $user-&gt;setPassword('secret');\n        $user-&gt;setRole($adminRole);\n        $this-&gt;_em-&gt;persist($user);\n\n        $this-&gt;_em-&gt;flush();\n    }\n}\n</code></pre>\n\n<p>Now if you run index action few groups will be created and an user, which is passed to the view: <strong>/application/modules/default/view/index/index.phtml</strong></p>\n\n<pre><code>hello &lt;php? echo $this-&gt;user-&gt;getUsername(); ?&gt;\n</code></pre>\n\n<p>Also probably layout is required, create:</p>\n\n<pre><code>&lt;!-- FILE: ../myapp/modules/default/views/scripts/layout.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id="content"&gt;\n        &lt;?php echo $this-&gt;layout()-&gt;content; ?&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If something went wrong or you cannot understand some parts of code, you can <a href="/files/myapp.rar">download</a> the application which was made in this example. <strong>Notice:</strong> that it will require Zend library in the /myapp/library folder if you do not have it in the include path. Also you will need to adjust the database credentials.</p>\n\n<p>Thats it. Now you can easily add another features and enjoy the Doctrine 2 on Zend framework</p>\n	0	2013-02-16 18:46:05.134114	2010-07-15 22:22:24
4	smarty-3-extension-for-zend-framework	Smarty 3 extension for Zend Framework	<p><strong>Smarty3</strong> extension is easy to integrate and with full compatibility of view and\nlayout templates which supports all standard features like modules and view rendering\nin ajax, json, xml. All helpers with Smarty 3 are working nicely without any intervention.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Layout and view rendering by standard rules</li>\n<li>Static template path for each module</li>\n<li>All helper support including ajax, json, xml contexts</li>\n</ul>\n	<p>Update <strong>2010-10-30</strong></p>\n\n<ul>\n<li>Added support for partials using smarty view, clone of view was updated</li>\n<li>Removed dependency on config storage on bootstrap</li>\n</ul>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n<li>This is an outdated version and it might not work with current application stack</li>\n<li>You can download full aplication <a href="http://gediminasm.org/files/smarty.rar" title="Smarty 3 Zend application">sources here</a>. Notice: that Zend library must be in your include path or /library directory.</li>\n<li>Last update date: <strong>2010-10-30</strong></li>\n<li>This extension will only work with <strong>Smarty 3</strong> version</li>\n</ul>\n\n<p>This article will cover the basic installation and functionality of <strong>Smarty 3</strong> extension</p>\n\n<p>Content:</p>\n\n<ul>\n<li><a href="#including-smarty">Preparing</a> the smarty library</li>\n<li>Setting up the application <a href="#ini">configuration</a></li>\n<li>Smarty 3 view <a href="#boot">bootstrap</a></li>\n<li>Seeing it in <a href="#action">action</a></li>\n</ul>\n\n<p><a name="including-smarty"></a></p>\n\n<h2>Downloading Smarty 3</h2>\n\n<p>First of all we will need to download Smarty 3:</p>\n\n<ul>\n<li>Go to the smarty <a href="http://www.smarty.net/download.php">downloads</a></li>\n<li>Select and download the latest smarty 3 release</li>\n<li>Extract it and copy contents of directory <strong>libs</strong> into <strong>/myapp/library/Smarty/</strong></li>\n</ul>\n\n<p>After doing that your application structure should look something like this:</p>\n\n<pre><code>...\n/myapp\n    /application\n        /configs\n            application.ini\n        /modules\n        Bootstrap.php\n    /library\n        /Smarty\n            /plugins\n            /sysplugins\n            /debug.tpl\n            /Smarty.class.php\n    /public\n...\n</code></pre>\n\n<p><a name="ini"></a></p>\n\n<h2>Setting up the application.ini configuration</h2>\n\n<p>For good practise we will use modules. Your basic configuration can look like:</p>\n\n<pre><code>[production]\nphpSettings.display_startup_errors = 0\nphpSettings.display_errors = 0\n\nbootstrap.path = APPLICATION_PATH "/Bootstrap.php"\nbootstrap.class = "Bootstrap"\n\nresources.frontController.moduleDirectory = APPLICATION_PATH "/modules"\nresources.frontController.moduleDefault = "default"\n\nresources.layout.layout = "layout"\nresources.view[] =\n\n; --- Autoloading Prefixes ---\n\nautoloaderNamespaces.extension[] = "Ext_"\n\n; --- Smarty ---\n\nsmarty.caching = 1\nsmarty.cache_lifetime = 14400 ; 4 hours\nsmarty.template_dir = APPLICATION_PATH "/templates/"\nsmarty.compile_dir = APPLICATION_PATH "/tmp/smarty_compile/"\nsmarty.config_dir = ""\nsmarty.cache_dir = APPLICATION_PATH "/tmp/smarty_cache/"\nsmarty.left_delimiter = "{"\nsmarty.right_delimiter = "}"\n\n[staging : production]\n\n[testing : production]\nphpSettings.display_startup_errors = 1\nphpSettings.display_errors = 1\n\n[development : production]\nphpSettings.display_startup_errors = 1\nphpSettings.display_errors = 1\nresources.frontController.params.displayExceptions = 1\n\nsmarty.caching = 0\n</code></pre>\n\n<p>This configuration will enable the layout and set the default smarty settings.\nAlso you will require to add /tmp directory in your application catalog.\nThe prefix autoloader was configured also, which should be available in /library directory.</p>\n\n<p>After some modifications you should have structure like:</p>\n\n<pre><code>...\n/myapp\n    /application\n        /configs\n            application.ini\n        /modules\n            /default\n                /controllers\n                    ...\n                /views\n                    ...\n        /tmp\n        Bootstrap.php\n    /library\n        /Smarty\n            /plugins\n            /sysplugins\n            /debug.tpl\n            /Smarty.class.php\n        /Ext\n    /public\n...\n</code></pre>\n\n<p><a name="view"></a></p>\n\n<h2>Now the most important: Smarty View class</h2>\n\n<p>I won't go into details about Zend View and it's functionality, but to have our template engine we will need to create\nour View class which will no how to assign variables to smarty and how to render the templates.\nSo in your library extension /Ext which has prefix autoloader, create the directory <strong>View</strong> which will contain file Smarty.php</p>\n\n<pre><code>/**\n * Smarty template engine integration into Zend Framework\n * Some ideas borrowed from http://devzone.zend.com/article/120\n */\n\nclass Ext_View_Smarty extends Zend_View_Abstract\n{\n    /**\n     * Instance of Smarty\n     * @var Smarty\n     */\n    protected $_smarty = null;\n\n    /**\n     * Template explicitly set to render in this view\n     * @var string\n     */\n    protected $_customTemplate = '';\n\n    /**\n     * Smarty config\n     * @var array\n     */\n    private $_config = null;\n\n    /**\n     * Class definition and constructor\n     *\n     * Let's start with the class definition and the constructor part. My class Travello_View_Smarty is extending the Zend_View_Abstract class. In the constructor the parent constructor from Zend_View_Abstract is called first. After that a Smarty object is instantiated, configured and stored in a private attribute.\n     * Please note that I use a configuration object from the object store to get the configuration data for Smarty.\n     *\n     * @param array $smartyConfig\n     * @param array $config\n     */\n    public function __construct($smartyConfig, $config = array())\n    {\n        $this-&gt;_config = $smartyConfig;\n        parent::__construct($config);\n        $this-&gt;_loadSmarty();\n    }\n\n    /**\n     * Return the template engine object\n     *\n     * @return Smarty\n     */\n    public function getEngine()\n    {\n        return $this-&gt;_smarty;\n    }\n\n    /**\n     * Implement _run() method\n     *\n     * The method _run() is the only method that needs to be implemented in any subclass of Zend_View_Abstract. It is called automatically within the render() method. My implementation just uses the display() method from Smarty to generate and output the template.\n     *\n     * @param string $template\n     */\n    protected function _run()\n    {\n        $file = func_num_args() &gt; 0 &amp;&amp; file_exists(func_get_arg(0)) ? func_get_arg(0) : '';\n        if ($this-&gt;_customTemplate || $file) {\n            $template = $this-&gt;_customTemplate;\n            if (!$template) {\n                $template = $file;\n            }\n\n            $this-&gt;_smarty-&gt;display($template);\n        } else {\n            throw new Zend_View_Exception('Cannot render view without any template being assigned or file does not exist');\n        }\n    }\n\n    /**\n     * Overwrite assign() method\n     *\n     * The next part is an overwrite of the assign() method from Zend_View_Abstract, which works in a similar way. The big difference is that the values are assigned to the Smarty object and not to the $this-&gt;_vars variables array of Zend_View_Abstract.\n     *\n     * @param string|array $var\n     * @return Ext_View_Smarty\n     */\n    public function assign($var, $value = null)\n    {\n        if (is_string($var)) {\n            $this-&gt;_smarty-&gt;assign($var, $value);\n        } elseif (is_array($var)) {\n            foreach ($var as $key =&gt; $value) {\n                $this-&gt;assign($key, $value);\n            }\n        } else {\n            throw new Zend_View_Exception('assign() expects a string or array, got '.gettype($var));\n        }\n        return $this;\n    }\n\n    /**\n     * Overwrite escape() method\n     *\n     * The next part is an overwrite of the escape() method from Zend_View_Abstract. It works both for string and array values and also uses the escape() method from the Zend_View_Abstract. The advantage of this is that I don't have to care about each value of an array to get properly escaped.\n     *\n     * @param mixed $var\n     * @return mixed\n     */\n    public function escape($var)\n    {\n        if (is_string($var)) {\n            return parent::escape($var);\n        } elseif (is_array($var)) {\n            foreach ($var as $key =&gt; $val) {\n                $var[$key] = $this-&gt;escape($val);\n            }\n        }\n        return $var;\n    }\n\n    /**\n     * Print the output\n     *\n     * The next method output() is a wrapper on the render() method from Zend_View_Abstract. It just sets some headers before printing the output.\n     *\n     * @param &amp;lt;type&gt; $name\n     */\n    public function output($name)\n    {\n        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");\n        header("Cache-Control: no-cache");\n        header("Pragma: no-cache");\n        header("Cache-Control: post-check=0, pre-check=0", false);\n\n        print parent::render($name);\n    }\n\n    /**\n     * Use Smarty caching\n     *\n     * The last two methods were created to simply integrate the Smarty caching mechanism in the View class. With the first one you can check for cached template and with the second one you can set the caching on or of.\n     *\n     * @param string $template\n     * @return bool\n     */\n    public function isCached($template)\n    {\n        return $this-&gt;_smarty-&gt;is_cached($template);\n    }\n\n    /**\n     * Enable/disable caching\n     *\n     * @param bool $caching\n     * @return Ext_View_Smarty\n     */\n    public function setCaching($caching)\n    {\n        $this-&gt;_smarty-&gt;caching = $caching;\n        return $this;\n    }\n\n    /**\n     * Template getter (return file path)\n     * @return string\n     */\n    public function getTemplate()\n    {\n        return $this-&gt;_customTemplate;\n    }\n\n    /**\n     * Template filename setter\n     * @param string\n     * @return Ext_View_Smarty\n     */\n    public function setTemplate($tpl)\n    {\n        $this-&gt;_customTemplate = $tpl;\n        return $this;\n    }\n\n    /**\n     * Magic setter for Zend_View compatibility. Performs assign()\n     *\n     * @param string $key\n     * @param mixed $val\n     */\n    public function __set($key, $val)\n    {\n        $this-&gt;assign($key, $val);\n    }\n\n\n    /**\n     * Magic getter for Zend_View compatibility. Retrieves template var\n     *\n     * @param string $key\n     * @return mixed\n     */\n    public function __get($key)\n    {\n        return $this-&gt;_smarty-&gt;getTemplateVars($key);\n    }\n\n    /**\n     * Magic getter for Zend_View compatibility. Removes template var\n     *\n     * @see View/Zend_View_Abstract::__unset()\n     * @param string $key\n     */\n    public function __unset($key)\n    {\n        $this-&gt;_smarty-&gt;clearAssign($key);\n    }\n\n    /**\n     * Allows testing with empty() and isset() to work\n     * Zend_View compatibility. Checks template var for existance\n     *\n     * @param string $key\n     * @return boolean\n     */\n    public function __isset($key)\n    {\n        return (null !== $this-&gt;_smarty-&gt;getTemplateVars($key));\n    }\n\n    /**\n     * Zend_View compatibility. Retrieves all template vars\n     *\n     * @see Zend_View_Abstract::getVars()\n     * @return array\n     */\n    public function getVars()\n    {\n        return $this-&gt;_smarty-&gt;getTemplateVars();\n    }\n\n    /**\n     * Updates Smarty's template_dir field with new value\n     *\n     * @param string $dir\n     * @return Ext_View_Smarty\n     */\n    public function setTemplateDir($dir)\n    {\n        $this-&gt;_smarty-&gt;setTemplateDir($dir);\n        return $this;\n    }\n\n    /**\n     * Adds another Smarty template_dir to scan for templates\n     *\n     * @param string $dir\n     * @return Ext_View_Smarty\n     */\n    public function addTemplateDir($dir)\n    {\n        $this-&gt;_smarty-&gt;addTemplateDir($dir);\n        return $this;\n    }\n\n    /**\n     * Adds another Smarty plugin directory to scan for plugins\n     *\n     * @param string $dir\n     * @return Ext_View_Smarty\n     */\n    public function addPluginDir($dir)\n    {\n        $this-&gt;_smarty-&gt;addPluginsDir($dir);\n        return $this;\n    }\n\n    /**\n     * Zend_View compatibility. Removes all template vars\n     *\n     * @see View/Zend_View_Abstract::clearVars()\n     * @return Ext_View_Smarty\n     */\n    public function clearVars()\n    {\n        $this-&gt;_smarty-&gt;clearAllAssign();\n        $this-&gt;assign('this', $this);\n        return $this;\n    }\n\n    /**\n     * Zend_View compatibility. Add the templates dir\n     *\n     * @see View/Zend_View_Abstract::addBasePath()\n     * @return Ext_View_Smarty\n     */\n    public function addBasePath($path, $classPrefix = 'Zend_View')\n    {\n        parent::addBasePath($path, $classPrefix);\n        $this-&gt;addScriptPath($path . '/templates');\n        $this-&gt;addTemplateDir($path . '/templates/static');\n        return $this;\n    }\n\n    /**\n     * Zend_View compatibility. Set the templates dir instead of scripts\n     *\n     * @see View/Zend_View_Abstract::setBasePath()\n     * @return Ext_View_Smarty\n     */\n    public function setBasePath($path, $classPrefix = 'Zend_View')\n    {\n        parent::setBasePath($path, $classPrefix);\n        $this-&gt;setScriptPath($path . '/templates');\n        $this-&gt;addTemplateDir($path . '/templates/static');\n        return $this;\n    }\n\n    /**\n     * Magic clone method, on clone create diferent smarty object\n     */\n    public function __clone() {\n        $this-&gt;_loadSmarty();\n    }\n\n    /**\n     * Initializes the smarty and populates config params\n     *\n     * @throws Zend_View_Exception\n     * @return void\n     */\n    private function _loadSmarty()\n    {\n        if (!class_exists('Smarty', true)) {\n            require_once 'Smarty/Smarty.class.php';\n        }\n\n        $this-&gt;_smarty = new Smarty();\n\n        if ($this-&gt;_config === null) {\n            throw new Zend_View_Exception("Could not locate Smarty config - node 'smarty' not found");\n        }\n\n        $this-&gt;_smarty-&gt;caching = $this-&gt;_config['caching'];\n        $this-&gt;_smarty-&gt;cache_lifetime = $this-&gt;_config['cache_lifetime'];\n        $this-&gt;_smarty-&gt;template_dir = $this-&gt;_config['template_dir'];\n        $this-&gt;_smarty-&gt;compile_dir = $this-&gt;_config['compile_dir'];\n        $this-&gt;_smarty-&gt;config_dir = $this-&gt;_config['config_dir'];\n        $this-&gt;_smarty-&gt;cache_dir = $this-&gt;_config['cache_dir'];\n        $this-&gt;_smarty-&gt;left_delimiter = $this-&gt;_config['left_delimiter'];\n        $this-&gt;_smarty-&gt;right_delimiter = $this-&gt;_config['right_delimiter'];\n        $this-&gt;assign('this', $this);\n    }\n}\n</code></pre>\n\n<p>Now the /library directory looks like:</p>\n\n<pre><code>...\n/myapp\n    ...\n    /library\n        /Smarty\n            /plugins\n            /sysplugins\n            /debug.tpl\n            /Smarty.class.php\n        /Ext\n            /View\n                Smarty.php\n    /public\n...\n</code></pre>\n\n<p><a name="boot"></a></p>\n\n<h2>Bootsraping the Smarty 3 view:</h2>\n\n<p>Basically we need to bootstrap the view using our new Smarty view and set the layout and script suffixes. Also we need to give this view to the ViewRenderer helper. So lets modify our /application/Bootstrap.php file:</p>\n\n<pre><code>class Bootstrap extends Zend_Application_Bootstrap_Bootstrap\n{\n    /**\n     * Bootstrap Smarty view\n     */\n    protected function _initView()\n    {\n        // initialize smarty view\n        $view = new Ext_View_Smarty($this-&gt;getOption('smarty'));\n        // setup viewRenderer with suffix and view\n        $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');\n        $viewRenderer-&gt;setViewSuffix('tpl');\n        $viewRenderer-&gt;setView($view);\n\n        // ensure we have layout bootstraped\n        $this-&gt;bootstrap('layout');\n        // set the tpl suffix to layout also\n        $layout = Zend_Layout::getMvcInstance();\n        $layout-&gt;setViewSuffix('tpl');\n\n        return $view;\n    }\n}\n</code></pre>\n\n<p><a name="action"></a></p>\n\n<h2>Seeing it in action:</h2>\n\n<p>Now generally all hard work is done and everything else should work as it should..</p>\n\n<p>To see what good do we have lets put some templates on our modules to check if everything is in place and working. First lets have a look at our default module structure:</p>\n\n<pre><code>...\n/myapp\n    /application\n        /configs\n            application.ini\n        /modules\n            /default\n                /controllers\n                    IndexController.php\n                    ErrorController.php\n                /views\n                    /templates\n                        /error\n                            error.tpl\n                        /index\n                            index.tpl\n                        /static\n                            header.tpl\n                        layout.tpl\n        Bootstrap.php\n...\n</code></pre>\n\n<p>Slighly change the index controller:</p>\n\n<pre><code>&lt;?php\nclass IndexController extends Zend_Controller_Action\n{\n    public function indexAction()\n    {\n        $this-&gt;view-&gt;hello = 'Hello Smarty 3';\n    }\n}\n</code></pre>\n\n<p>Create the templates/index/index.tpl</p>\n\n<pre><code>&lt;p&gt;\n  {$hello}\n&lt;/p&gt;\n\n&lt;p&gt;\n  &lt;a href="{$this-&gt;url(['controller' =&gt; 'index', 'action' =&gt; 'index'])}"&gt;home&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>Create the templates/error/error.tpl</p>\n\n<pre><code>&lt;h1&gt;n error occurred&lt;/h1&gt;\n\n\n&lt;h2&gt;{$this-&gt;message}&lt;/h2&gt;\n\n  {if $this-&gt;exception}\n&lt;h3&gt;\n  Exception information:\n&lt;/h3&gt;\n\n\n&lt;p&gt;\n  &lt;b&gt;Message:&lt;/b&gt; {$this-&gt;exception-&gt;getMessage()}\n&lt;/p&gt;\n\n\n\n&lt;h3&gt;\n  Stack trace:\n&lt;/h3&gt;\n\n\n&lt;pre&gt;{$this-&gt;exception-&gt;getTraceAsString()}\n  &lt;/pre&gt;\n\n\n\n&lt;h3&gt;\n  Request Parameters:\n&lt;/h3&gt;\n\n\n&lt;pre&gt;{var_export($this-&gt;request-&gt;getParams(), true)}\n  &lt;/pre&gt;\n  {/if}\n</code></pre>\n\n<p>Create the templates/layout.tpl</p>\n\n<pre><code>&lt;div id="header"&gt;\n  {include file="header.tpl"}\n&lt;/div&gt;\n{$this-&gt;layout()-&gt;content}\n</code></pre>\n\n<p>Create the templates/static/header.tpl</p>\n\n<pre><code>this is header\n</code></pre>\n\n<p>Now if everything is properly configured you should see everything as expected</p>\n\n<p>Easy like that, any sugestions on improvements are very welcome</p>\n	1	2013-02-16 18:46:05.134114	2010-10-13 20:21:39
1	using-prototypal-inheritance-in-javascript	Using prototypal inheritance in javascript	<p>When coding full stack applications in javascript or just a component library, you\nsoon realize how it is important to keep it extensible and maintainable. This article\nwill mainly introduce you, how to use a prototypal inheritance method to apply OOP\nstyle in javascript and how to do it well.</p>\n\n<p>Main context:</p>\n\n<ul>\n<li>Private variables, methods</li>\n<li>Prototype extension</li>\n<li>Overriding methods</li>\n<li>Runtime method overriding</li>\n<li>Global scope methods</li>\n<li>Self invoking functions</li>\n</ul>\n	<p><strong>Last update date: 2013-02-13</strong></p>\n\n<h2>Setup environment</h2>\n\n<p>Hey theres nothing much here, just create <strong>index.html</strong> and <strong>person.js</strong> and lets simple:</p>\n\n<pre><code>&lt;!-- index.html file --&gt;\n&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Prototypal inheritance&lt;/title&gt;\n  &lt;script type="text/javascript" src="person.js"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;script type="text/javascript"&gt;\n(function() {\n    // some code\n}());\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>First thing to note, the function in declared in such a fancy style, self contains the code. Etc it\nwill be accessable and visible only in that scope. It does not map to window directly, use cases\nwill be shown later.</p>\n\n<p>Now lets start with a common class definition of <strong>person</strong>. I'll comment on code\nthe portions which may be useful to understand better</p>\n\n<pre><code>// file: person.js\n// note its the same as writting: window.Person = ... it is in global - window scope\n/**\n * A function definition is like a constructor everything defined in it\n * will be run inside when object is created\n */\nvar Person = function(name) {\n    /**\n     * This is a private variable, only accessible in the constructor\n     */\n    var _id = Person.identity++;\n\n    /**\n     * Public variable which can be accessed or assigned\n     * in the constructor or reasigned to initialized object\n     */\n    this.name = name;\n\n    /**\n     * Another public var\n     */\n    this.surname = '';\n\n    /**\n     * This is a private function only\n     * usable in constructor scope\n     */\n    function valid(str) {\n        return (/[\\a]+/).test(str);\n    };\n\n    /**\n     * This method can be publically executed\n     * but cannot be overrided, neither in extended classes.\n     * It can return and use private variables\n     *\n     * As pointed out in comments, defined methods in constructor - will\n     * be overwritten on each and every initialization, meaning when you\n     * do "var person = new Person('name');" it will overwrite these methods.\n     * So better do it only when necessary\n     */\n    this.getId = function() {\n        return _id;\n    };\n\n    /**\n     * The public method in constructor is useful\n     * to strictly define the functionality because it cannot be overriden,\n     * which may use other public or private variables, methods to fulfill it.\n     */\n    this.print = function() {\n        if (!valid(this.fullname)) {\n            throw "Sorry cannot print the person, it must have a fullname";\n        }\n        console.log(_id + ' --&gt; ' + this.fullname());\n    };\n};\n\n/**\n * This definition is like a statically accessable variable of Person\n * Does not change when new one is created.\n */\nPerson.identity = 0;\n\n/**\n * This method is using Person prototype and can be\n * extended/overrided in child classes, also it can\n * be changed on initialized object\n */\nPerson.prototype.fullname = function() {\n    return (this.surname.length ? this.surname + ' ' : '') + this.name;\n};\n\n/**\n * Another prototype method\n */\nPerson.prototype.greet = function() {\n    console.log('Hello, my name is ' + this.fullname());\n};\n</code></pre>\n\n<p>Now lets play around a bit to see how this works:</p>\n\n<pre><code>&lt;!-- modify index.html script block --&gt;\n&lt;script type="text/javascript"&gt;\n(function() {\n    // create two persons\n    var tom = new Person('Tom');\n    var jane = new Person('Jane');\n    jane.surname = 'Doe';\n\n    tom.print();  // outputs: 0 --&gt; Tom\n    jane.print(); // outputs: 1 --&gt; Doe Jane\n\n    // prototype extension methods can be overrided runtime\n    tom.fullname = function() {\n        return '';\n    };\n    try {\n        tom.print(); // will throw an exception\n    } catch (err) {\n        console.log('Caught exception: ' + err);\n    }\n    tom._id === undefined &amp;&amp; console.log('_id is unaccessable'); // its private and unaccessible\n}());\n&lt;/script&gt;\n</code></pre>\n\n<h2>Extending the Person</h2>\n\n<p>Here is an example of Employee which extends person.</p>\n\n<pre><code>// file: employee.js\nvar Employee = function(name, occupation) {\n   /**\n     * This is a very important part. It invokes Person constructor\n     * by applying arguments to Person constructor which runs in the\n     * scope Employee context through "this" variable as first argument\n     *\n     * You can read more about "apply" or "call" from the official sources\n     *\n     * Note: we run it early in constructor so that it initializes the public\n     * variables and methods.\n     */\n    Person.apply(this, arguments);\n\n    /**\n     * A public variable\n     */\n    this.occupation = occupation;\n};\n\n/**\n * These two lines are very important. Usage of "new" operand is also necessary\n * so that prototypal methods could be inherited or extended. We basically use\n * a prototype of parent but construct it as child\n */\nEmployee.prototype = new Person;\nEmployee.prototype.constructor = Employee;\n\n/**\n * In this case we extend the fullname method in Employee as a child class\n * Note: to invoke parent method we call it with context of our Employee object\n */\nEmployee.prototype.fullname = function() {\n    return Person.prototype.fullname.call(this) + " and I'm " + this.occupation;\n};\n</code></pre>\n\n<p>Now lets include it in <strong>index.html</strong> and see how inheritance works</p>\n\n<pre><code>&lt;head&gt;\n  &lt;script type="text/javascript" src="person.js"&gt;&lt;/script&gt;\n  &lt;script type="text/javascript" src="employee.js"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>And add some more js code in our code block index.html</p>\n\n<pre><code>var john = new Employee('John', 'developer');\njohn.surname = 'Doe';\nvar rose = new Employee('Rose', 'receptionist');\n\nrose.greet(); // outputs: Hello, my name is Rose and I'm receptionist\njane.greet(); // outputs: Hello, my name is Doe Jane\njohn.greet = function() {\n    Person.prototype.greet.call(this);\n    console.log('And I love Jane');\n};\njohn.greet(); // outputs: Hello, my name is Doe John and I'm developer \\n And I love Jane\n</code></pre>\n\n<p><strong>NOTE:</strong> concerning interfaces in javascript. There is no at least readable way as far as I know\nto make such. I would advice to avoid trying implementing it.</p>\n\n<h2>Self invoking functions</h2>\n\n<p>Note that <strong>Person.identity</strong> accessible publically and can be reset, which is not acceptable.\nNow is a good time to show why self invoking functions are useful and what is their meaning.\nThese functions are interpreted and executed while javascript is parsed by browser. It incubates\neverything inside in a limited scope.</p>\n\n<p>Lets rewrite our <strong>Person</strong> class in a different way.</p>\n\n<pre><code>// file: person.js\n\nvar Person = (function() {\n\n    /**\n     * This variable is accessable only in this scope\n     */\n    var identity = 0;\n\n    /**\n     * We can name our person class short, since its in the\n     * self contained scope and return it later as a class\n     */\n    var p = function(name) {\n        /**\n         * This is a private variable, only accessible in the constructor\n         */\n        var _id = identity++;\n\n        /**\n         * Public variable which can be accessed or assigned\n         * in the constructor or reasigned to initialized object\n         */\n        this.name = name;\n\n        /**\n         * Another public var\n         */\n        this.surname = '';\n\n        /**\n         * This is a private function only\n         * usable in constructor scope\n         */\n        function valid(str) {\n            return (/[\\a]+/).test(str);\n        };\n\n        /**\n         * This method can be publically executed\n         * but cannot be overrided, neither in extended classes.\n         * It can return and use private variables\n         */\n        this.getId = function() {\n            return _id;\n        };\n\n        /**\n         * The public method in constructor is useful\n         * to strictly define the functionality because it cannot be overriden,\n         * which may use other public or private variables, methods to fulfill it.\n         */\n        this.print = function() {\n            if (!valid(this.fullname)) {\n                throw "Sorry cannot print the person, it must have a fullname";\n            }\n            console.log(_id + ' --&gt; ' + this.fullname());\n        };\n    }; // end of constructor\n\n    /**\n     * This method is using Person prototype and can be\n     * extended/overrided in child classes, also it can\n     * be changed on initialized object\n     */\n    p.prototype.fullname = function() {\n        return (this.surname.length ? this.surname + ' ' : '') + this.name;\n    };\n\n    /**\n     * Another prototype method\n     */\n    p.prototype.greet = function() {\n        console.log('Hello, my name is ' + this.fullname());\n    };\n\n    // return our person class/function\n    return p;\n}());\n</code></pre>\n\n<p>Now in application runtime you will not be able to modify or reset <strong>identity</strong> generator.\nIn self invoking functions you can add methods and anything what can help you with calculations\nfor the object, which will not be exposed for public access.</p>\n\n<p>Further more, self invoking functions can take parameters, etc you can give anything as a parameter\nto be used as something in the scope of that function.</p>\n\n<pre><code>var obj = {};\n(function(o) {\n    o.name = 'foo';\n}(obj));\nconsole.log('Something happened to: ' + obj.name + ' object');\n</code></pre>\n\n<p>The actions can be described like: self invoking function takes <strong>obj</strong> to be used as <strong>o</strong></p>\n\n<h2>Recursion in javascript</h2>\n\n<p>To call function recursively in javascript you may use a function name or <strong>arguments.callee</strong></p>\n\n<p><strong>NOTE:</strong> <a href="http://javascript.info/tutorial/arguments#arguments-callee">arguments.callee is deprecated</a> its a reference to\nthe same function you are operating in.</p>\n\n<p>See an example on how to sum object values recursively:</p>\n\n<pre><code>var foo = {\n    a: 1,\n    b: 2,\n    c: {\n        a: 3,\n        b: {\n            a: 4\n        }\n    }\n};\n\nfunction sum(obj) {\n    var result = 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            if (typeof obj[key] == 'object') {\n                result += sum(obj[key]); /* you can also use arguments.callee(obj[key]); but it is deprecated */\n            } else {\n                result += obj[key];\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log('Recursive sum of obj values: ' + sum(foo));\n</code></pre>\n\n<h2>apply and call methods</h2>\n\n<p>These are very important and may be hard to understand in javascript, if you come from different language.\nBut it is very meaningful and useful to use in inheritance and in more advanced behavioral components.</p>\n\n<p>What it does, is invokes the given function in a context of something given. Etc. it can be object\nwhich can be used as a reference for some kind of calculations. But its hard to explain in words.\nLets start from most basic examples. Like adding a name to the object:</p>\n\n<pre><code>function setProperty(name) {\n    this.prop = name;\n}\n\nvar foo = {};\nvar bar = {};\nsetProperty.call(foo, "look mom I'm foo");\nsetProperty.apply(bar, ["here it goes to bar"]);\n\nconsole.log(foo, bar);\n</code></pre>\n\n<p>This is how it works. <strong>apply</strong> is different in a way that it takes arguments as array, <strong>call</strong> as\na parameter group. Using apply like we did for <strong>Employee</strong> we passed all arguments which function\nmay be given, even if we expect only one so far.</p>\n\n<p>Using the inheritance model shawn in this example, to invoke parent methods it is mandatory to use\n<strong>call</strong> or <strong>apply</strong>, you can think of many examples on where it may become useful.</p>\n\n<h2>Some tips</h2>\n\n<p>Sometimes it may look handy to extend native javascript objects like <strong>Array</strong> with some meaningful\nfunctions. But please take my advice: <strong>don't</strong> if you want someone to use and respect your code.\nLike someone said "theres a special place in hell for those, who extends native object prototypes".\nFew reasons why its such a big deal:</p>\n\n<ul>\n<li>If you put your <strong>magic</strong> code in some application, which is using some javascript it may hang\nsomewhere deep, because it may also extend natives.</li>\n<li>Debuging of such issues is insane process.</li>\n<li>Noone likes to put such code in their applications, especially libraries.</li>\n</ul>\n\n<p><strong>NOTE:</strong> as pointed out by <strong>ToJa</strong> in a comment - all calculations and definitions in constructor,\nwill be redefined and recalculated on each and every call to "new" operator, meaning when you call</p>\n\n<pre><code>var person = new Person('person name');\n</code></pre>\n\n<p>It would redefine <strong>getId, print</strong> functions and do other calculations all over again. So use it\njudiciously.</p>\n\n<p>Hope you have learned something interesting, have fun.</p>\n	15	2013-02-16 18:46:05.134114	2012-05-26 01:12:29
3	compile-php	Compile php on your own	<p>This article contains a PHP build script and a quick tutorial on how\nto compile and setup php-5.3.x version into your server</p>\n\n<p>Steps:</p>\n\n<ul>\n<li>Downloading sources</li>\n<li>Making a configure script</li>\n<li>Building and deploying</li>\n</ul>\n	<p><strong>Note:</strong></p>\n\n<ul>\n<li>The PHP was compiled on Ubuntu server 9.10 (Karmic Koala) linux version</li>\n<li>Tested compilation on <strong>PHP-5.3.1, PHP-5.3.2, PHP-5.3.4-dev</strong> versions</li>\n<li>Build script does not contain additional PDO drivers like PostgreSql, MssSql. If you need it search an information on how to include them</li>\n<li>It is possible that I missed to include some library in case if I had it before</li>\n<li>Last update date: <strong>2010-08-16</strong></li>\n</ul>\n\n<p>First of all we need to download the sources of PHP:</p>\n\n<ul>\n<li>Go to <a href="http://php.net/releases/index.php">PHP releases</a> take the sources of php 5.3.x version, better stable and make sure it is thread safe, uless you know what you are doing..</li>\n<li>Here I use the root user, because most operations will require privileges</li>\n<li>Download and then extract (tar xzvf php-5.3.x.tar.gz) into /root/ directory or somethere else..</li>\n<li>No we will need some additional libraries and the development tools before we begin</li>\n</ul>\n\n<p>Run these commands to install tools:</p>\n\n<pre><code>apt-get install checkinstall\n\napt-get install apache2 apache2-mpm-prefork apache2-prefork-dev apache2-utils apache2.2-common\n\napt-get install mysql-client mysql-client-5.1 mysql-common mysql-server mysql-server-5.1 mysql-server-core-5.1\n\napt-get install apache2-threaded-dev\n\napt-get install libtidy-dev curl libcurl4-openssl-dev libcurl3 libcurl3-gnutls zlib1g zlib1g-dev libxslt1-dev libzip-dev libzip1 libxml2 libsnmp-base libsnmp15 libxml2-dev libsnmp-dev libjpeg62 libjpeg62-dev libpng12-0 libpng12-dev zlib1g zlib1g-dev libfreetype6 libfreetype6-dev libbz2-dev libxaw7-dev libmcrypt-dev libmcrypt4\n</code></pre>\n\n<p>Next, we will need to make a build script, run <strong>cd php-5.3.x &amp;&amp; vi build_php</strong> and insert the configuration script:</p>\n\n<pre><code>./configure \\\n--with-apxs2=/usr/bin/apxs2 \\\n--with-mysql=/usr \\\n--with-mysqli=/usr/bin/mysql_config \\\n--with-tidy=/usr \\\n--with-curl=/usr/bin \\\n--with-openssl \\\n--with-openssl-dir=/usr \\\n--with-kerberos=/usr \\\n--with-zlib-dir=/usr \\\n--with-xpm-dir=/usr \\\n--with-pdo-mysql=/usr \\\n--with-xsl=/usr \\\n--with-xmlrpc \\\n--with-iconv-dir=/usr \\\n--with-snmp=/usr \\\n--enable-exif \\\n--enable-cli \\\n--enable-calendar \\\n--with-bz2=/usr \\\n--with-mcrypt=/usr \\\n--with-mhash \\\n--with-gd \\\n--with-jpeg-dir=/usr \\\n--with-png-dir=/usr \\\n--with-zlib-dir=/usr \\\n--with-freetype-dir=/usr \\\n--with-imap \\\n--with-imap-ssl \\\n--enable-zend-multibyte \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-soap \\\n--enable-sockets \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--enable-zip \\\n--enable-ftp \\\n--with-pear \\\n--disable-debug\n</code></pre>\n\n<p>The build script contains usual tools, like ssl, imap, mbstring, soap..</p>\n\n<p>Next make this script executable: <strong>chmod +x build_php</strong></p>\n\n<p>Now run the <strong>./build_php</strong> to configure our PHP</p>\n\n<p>It can take few minutes, if there will be no errors then it went quite easy and we are allmost done, if there were errors.. then its even more interesting :)</p>\n\n<p>Ok if you succeeded with configuration lets make the php lib, run:</p>\n\n<pre><code>make\n</code></pre>\n\n<p>That can take long, better take a cup of coffee, maybe two if you had problems with configuration</p>\n\n<p>If you have not finished your coffee and want to wait much longer, then you can run tests:</p>\n\n<pre><code>make test\n</code></pre>\n\n<p>Now if the job is done, and make did not throw a fatal error, congrats! you got it!</p>\n\n<p>Now few easy steps to use <strong>Your New PHP</strong>:</p>\n\n<p>Create the new apache module: <strong>vi /etc/apache2/mods-available/php53x.load</strong> and place code to load your php library</p>\n\n<pre><code>LoadModule php5_module /root/src/php-5.3.x/libs/libphp5.so\n</code></pre>\n\n<p>Now we will need to configure this module <strong>nano /etc/apache2/mods-available/php53x.conf</strong> and place the code:</p>\n\n<pre><code>&lt;IfModule mod_php5.c&gt;\n  AddType application/x-httpd-php .php .phtml .php3\n  AddType application/x-httpd-php-source .phps\n  PHPIniDir /root/src/php-5.3.x/libs\n&lt;/IfModule&gt;\n</code></pre>\n\n<p><strong>Note:</strong> that we configured to load php.ini from specific directory</p>\n\n<p>And at last and least, disable old php module and enable new. Restart apache after that:</p>\n\n<pre><code>a2dismod php5\na2enmod php53x\n/etc/init.d/apache2 restart\n</code></pre>\n\n<p>Thats it! You should run the phpInfo(); and enjoy the result :)</p>\n	1	2013-02-16 18:46:05.134114	2010-08-16 22:26:47
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('posts_id_seq', 4, true);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: messages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: posts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: comments_created_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX comments_created_index ON comments USING btree (created);


--
-- Name: comments_post_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX comments_post_id ON comments USING btree (post_id);


--
-- Name: posts_created_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX posts_created_index ON posts USING btree (created);


--
-- Name: posts_slug_index; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX posts_slug_index ON posts USING btree (slug);


--
-- Name: comments_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE DEFERRABLE;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

